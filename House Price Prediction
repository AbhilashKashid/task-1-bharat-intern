# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load your dataset (replace 'your_dataset.csv' with your actual dataset)
data = pd.read_csv('your_dataset.csv')

# Assuming you have a column named 'price' for the target variable
# You may need to preprocess your data accordingly (handle missing values, categorical variables, etc.)

# Split the data into features (X) and target variable (y)
X = data.drop('price', axis=1)
y = data['price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Linear Regression model (Scikit-learn)
linear_model = LinearRegression()
linear_model.fit(X_train_scaled, y_train)
linear_predictions = linear_model.predict(X_test_scaled)

# Evaluate the linear regression model
linear_mse = mean_squared_error(y_test, linear_predictions)
print(f"Linear Regression Mean Squared Error: {linear_mse}")

# Neural Network model (TensorFlow)
model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, verbose=0)

# Predictions using the neural network model
nn_predictions = model.predict(X_test_scaled).flatten()

# Evaluate the neural network model
nn_mse = mean_squared_error(y_test, nn_predictions)
print(f"Neural Network Mean Squared Error: {nn_mse}")
